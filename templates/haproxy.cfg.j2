# {{ ansible_managed }}
# config for haproxy 1.5.x

global
    log 127.0.0.1   local0
    log 127.0.0.1   local1 notice
    maxconn 4096
    user haproxy
    group haproxy
    daemon

    tune.ssl.default-dh-param 2048
{% if haproxy_disable_insecure_ciphers is defined and haproxy_disable_insecure_ciphers %}
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA

    ssl-default-server-options no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
{% endif %}

defaults
    log global
    mode http

    option httplog
    option dontlognull

    timeout connect 5000
    timeout client  50000
    timeout server  50000

    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http
    
    
{% if haproxy_frontends is defined %} 
{% set haproxy_configure_frontends = haproxy_frontends %}
{% else %}
{% set haproxy_configure_frontends = haproxy_default_frontends %}
{% endif %}
{% set __certificates -%}
	{% include "certs.j2" %} 
{%- endset %}

{% for frontend_name, frontend_config in haproxy_configure_frontends.iteritems() %}
# {{frontend_name}} frontend for all http traffic
##################################################
{% set __frontend_index = loop.index %}
frontend http-{{frontend_name}}
    bind {{ frontend_config.bind_address }}:80
{# -- find ports for portmapping -- #}
{% for domain, masterconfig in haproxy_domains.iteritems() %}
{% set __used_ports = masterconfig.backend.portmapping|default([]) -%}
{# -- USE DOMAIN: frontent is defined in config or if not defined and __frontend_index 1 (the first one) -- #}
{% if not masterconfig.frontends is defined and __frontend_index == 1 %}
	{%- set __use_frontend = True %}
{% elif frontend_name in masterconfig.frontends | default([]) %}
	{%- set __use_frontend=True %}
{% else %}
	{%- set __use_frontend = False %}
{% endif %}
{% if __use_frontend %}
{% for port_config in __used_ports %}
    bind {{ frontend_config.bind_address }}:{{ port_config.port }}
{% endfor -%}{# -- end __used_ports -- #}
{% endif -%}{# -- end  __use_frontend -- #}
{% endfor %}{# -- end haproxy_domains.iteritems # find ports for portmapping -- #}
    mode http
    option forwardfor
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    {% include "stats.j2" %}
	{% set __configure_http = True %}
	{% set __configure_https = False %}
	{%- include "domains.j2" %}

{% if __certificates != '' %}
# {{ frontend_name }} frontend for all https traffic
##################################################
frontend https-{{ frontend_name }}
    bind {{ frontend_config.bind_address }}:443 ssl {{ __certificates }}
{# -- find ports for portmapping -- #}
{% for domain, masterconfig in haproxy_domains.iteritems() %}
{% set __used_ports = masterconfig.backend.portmapping|default([]) -%}
{# -- USE DOMAIN: frontent is defined in config or if not defined and __frontend_index 1 (the first one) -- #}
{% if not masterconfig.frontends is defined and __frontend_index == 1 %}
	{%- set __use_frontend = True %}
{% elif frontend_name in masterconfig.frontends | default([]) %}
	{%- set __use_frontend=True %}
{% else %}
	{%- set __use_frontend = False %}
{% endif -%}
{% if __use_frontend %}
{% for port_config in __used_ports %}
    bind {{ frontend_config.bind_address }}:{{ port_config.port }} ssl {{ __certificates }}
{% endfor -%}{# -- end __used_ports -- #}
{% if masterconfig.sni_alt|default(False) %}
    bind {{ frontend_config.bind_address }}:{{ masterconfig.sni_alt }} ssl {{ __certificates }}
{% endif %}
{% endif -%}{# -- end  __use_frontend -- #}
{% endfor %}{# -- end haproxy_domains.iteritems # find ports for portmapping -- #}
    mode http
    option forwardfor
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    {% include "stats.j2" %}
	{% set __configure_http = False %}
	{% set __configure_https = True %}
	{%- include "domains.j2" %}
{% endif -%}

{% endfor %}  
 
# define backends
##################################################
{# ---- backends for default route / ---- #}

# default domain backends ########################
{% for domain, config in haproxy_domains.iteritems() %}

##### backend for domain: {{ domain }} #####
backend backend.{{ domain }}
    mode http
{% include "backends.j2" %}
{% endfor %}

# special routes #################################

{# -- loop trough routes an include backend again #}
{% for domain, masterconfig in haproxy_domains.iteritems() %}
{% set __routes = masterconfig.backend.routing|default({}) %}
{% for route, config in __routes.iteritems() %}

##### backend for domain: {{ domain }} route: /{{ route }} #####
{% set suffix='.' + route|replace('/','--') %}
backend backend.{{ domain }}{{ suffix }}
    mode http
{% include "backends.j2" %}
{% endfor %}
{% endfor %}

# port mapping ###################################

{# -- loop trough routes an include backend again #}
{% for domain, masterconfig in haproxy_domains.iteritems() %}
{% set __used_ports = masterconfig.backend.portmapping|default([]) %}
{% for config in __used_ports %}

##### backend for domain: {{ domain }} port: {{ config.port }} #####
backend backend.{{ domain }}.port-{{ config.port }}
    mode http
{% include "backends.j2" %}
{% endfor %}
{% endfor %}

# letsencrypt route ################################

{# -- letsencrypt special backend -- #}
{% for domain, masterconfig in haproxy_domains.iteritems() %}
{% if haproxy_letsencrypt_validation %}

##### backend for domain: {{ domain }} letsencrypt validation
backend backend.letsencrypt-{{ domain }}
   mode http
   # make dirty shellscript work
   no option checkcache
   reqrep ^([^\ :]*)\ /.well-known/acme-challenge/(.*)     \1\ /{{ domain}}/.well-known/acme-challenge/\2
   server node1.backend.letsencrypt-{{ domain }} {{ haproxy_letsencrypt_bind_address }}:{{ haproxy_letsencrypt_port }}
{% endif  %}
{% endfor %}

{# works with old config #}
{% if haproxy_mysql_cluster and haproxy_mysql_nodes[0] is defined %}
{% include "galera-cluster-backward.j2" %}
{% endif %}

{# works with new config #}
{% for galera in haproxy_mysql_clusters %}
{% include "galera-cluster.j2" %}
{% endfor %}

{% if haproxy_tcp_listen and haproxy_tcp_listen[0] is defined %}
{% include "haproxy-listen.j2" %}
{% endif %}

